////  PSDHelpers.jsx////  AmazingBuild - PSDCutter//  Copyright (C) 2015 Mateus Mesquita | Green Little Monster.////  mesquitax@greenlittlemonster.com//  www.greenlittlemonster.com////  This software is provided 'as-is', without any express or implied warranty.//  In no event will the authors be held liable for any damages arising//  from the use of this software.////  Permission is granted to anyone to use this software for any purpose,//  including commercial applications, and to alter it and redistribute it//  freely, subject to the following restrictions:////  1. The origin of this software must not be misrepresented; you must not//     claim that you wrote the original software.//  2. If you use this software in a product, an acknowledgment in the product//     IS HIGHLY APPRECIATED, both in source and binary forms.//     If you will not acknowledge, just send me a email. I'll be VERY happy//     to see my work being used by other people. :)//     (See opensource.mesquitax.com//acknowledgment.html for details).//  3. Altered source versions must be plainly marked as such, and must not be//     misrepresented as being the original software.//  4. This notice may not be removed or altered from any source distribution.//  5. Most important, you must have fun. ;)////  Visit opensource.greenlittlemonster.com for more open-source projects.////  Enjoy :)//// Variables //var logFile;var ObjectType = {    Prefabs   : "Prefabs",    Sprite    : "Sprite",    Scene     : "Scene",    Button    : "Button",    Ignorable : "Ignorable",    Unknown   : "Unknown",};function findObjectType(group){    var name = group.name;        if(name[0] == "_")                        return ObjectType.Ignorable;    if(name == ObjectType.Prefabs           ) return ObjectType.Prefabs;    if(name.indexOf(ObjectType.Sprite) != -1) return ObjectType.Sprite;    if(name.indexOf(ObjectType.Scene ) != -1) return ObjectType.Scene;    if(name.indexOf(ObjectType.Button) != -1) return ObjectType.Button;        return ObjectType.Unknown;}function openLog(name, path, enabled){    if(enabled)    {            logFile = File(path + name + ".txt");        $.writeln(logFile.absoluteURI);        logFile.open("w");    }    else    {         logFile = $;    }}function closeLog(){    if(logFile != $)            logFile.close();}﻿// Helper Functions //function log(str){    logFile.writeln(str);};/**@brief Removes all spaces in a String.@param str The string that will be processed.@return A new string without all of spaces.*/function removeSpaces(str){    while(str.indexOf(" ") != -1)        str = str.replace(" ", "");        return str;};/**@brief Creates a Folder at the specified path.If it already exists the folder will be removed first.@param path The path that folder will be created.@param folderName The name of folder that will be created.@return A reference to the created folder.*/function makeFolder(path, folderName){    var folder = Folder(path + "/" + folderName);    if(folder.exists)        folder.remove();    folder.create();       return folder;}/** @brief Creates a new Document. @param filename The filename of the created document. (Required) @param width The width of the created document. (Required) @param height The height of the created document. (Required) @param activeAfter Reference to document the will be active after the creation (Optional) @return The created Document. */function createDocument(filename, width, height, activeAfter){    var newDoc = app.documents.add(width,                       //Width of layer.                                   height,                      //Height of layer.                                   72,                          //DPI.                                   filename,                    //Complete filename.                                   NewDocumentMode.RGB,         //Document Mode.                                   DocumentFill.TRANSPARENT);   //Fill type.                            //If activeAfter is not undefined means that we 	//must set the App Active Document to this document.    if(activeAfter != undefined)        app.activeDocument = activeAfter;            return newDoc;}/**@brief Saves a layer into a new png file.@param layer The Layer that will be saved into a file.@param filename The complete path for the file.@param sourceDoc The Document that contains the layer.*/function saveLayer(layer, filename, sourceDoc){    //Get the width and height of the layer.	saveLayerWithSize(layer, filename, sourceDoc, getLayerSize(layer)[0], getLayerSize(layer)[1]);};function saveLayerWithSize(layer, filename, sourceDoc, width, height){    //Make sure that filename has not any spaces.    filename = removeSpaces(filename);    //Create a new document    var newDoc = createDocument(filename, width, height, sourceDoc);    //Duplicate the layer into the original document.    var duplicatedLayer = layer.duplicate();    //Since the layer is a group merge it into a single layer.    duplicatedLayer = duplicatedLayer.merge();    //Cut it into clipboard.    duplicatedLayer.cut();        //Set the frontmost document to the new document.    //and paste the duplicated layer from clipboard.    app.activeDocument = newDoc;    newDoc.paste();    //Save the document that contains the layer.     //So we are saving the layer.    var file = new File(filename);    newDoc.saveAs(file, SaveDocumentType.PNG, true, Extension.LOWERCASE);    newDoc.close(SaveOptions.DONOTSAVECHANGES);              //Switch back to the original document and remove the     //duplicated layer traces from it.    app.activeDocument = sourceDoc;    duplicatedLayer.remove();}/***/function saveDocument(doc, filename){    var file = new File(filename);        doc.saveAs(file, SaveDocumentType.PHOTOSHOP , true, Extension.LOWERCASE);    doc.close(SaveOptions.DONOTSAVECHANGES);}function setLayerPosition(layer, x, y) {    var pos = getLayerPosition(layer);      pos[0] = x - pos[0];    pos[1] = x - pos[1];        app.activeDocument = app.documents[1];    layer.translate(-pos[0],-pos[1]);}function getLayerPosition(layer){    return [layer.bounds[0].value, layer.bounds[1].value];   }function getLayerSize(layer){    var pos = getLayerPosition(layer);    return [Math.abs(pos[0] - layer.bounds[2].value),             Math.abs(pos[1] - layer.bounds[3].value)];}